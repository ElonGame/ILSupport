<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="nop" xml:space="preserve">
    <value>Fills space if opcodes are patched. No meaningful operation is performed although a processing cycle can be consumed.</value>
  </data>
  <data name="break" xml:space="preserve">
    <value>Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.</value>
  </data>
  <data name="ldarg.0" xml:space="preserve">
    <value>Loads the argument at index 0 onto the evaluation stack.</value>
  </data>
  <data name="ldarg.1" xml:space="preserve">
    <value>Loads the argument at index 1 onto the evaluation stack.</value>
  </data>
  <data name="ldarg.2" xml:space="preserve">
    <value>Loads the argument at index 2 onto the evaluation stack.</value>
  </data>
  <data name="ldarg.3" xml:space="preserve">
    <value>Loads the argument at index 3 onto the evaluation stack.</value>
  </data>
  <data name="ldloc.0" xml:space="preserve">
    <value>Loads the local variable at index 0 onto the evaluation stack.</value>
  </data>
  <data name="ldloc.1" xml:space="preserve">
    <value>Loads the local variable at index 1 onto the evaluation stack.</value>
  </data>
  <data name="ldloc.2" xml:space="preserve">
    <value>Loads the local variable at index 2 onto the evaluation stack.</value>
  </data>
  <data name="ldloc.3" xml:space="preserve">
    <value>Loads the local variable at index 3 onto the evaluation stack.</value>
  </data>
  <data name="stloc.0" xml:space="preserve">
    <value>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 0.</value>
  </data>
  <data name="stloc.1" xml:space="preserve">
    <value>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 1.</value>
  </data>
  <data name="stloc.2" xml:space="preserve">
    <value>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 2.</value>
  </data>
  <data name="stloc.3" xml:space="preserve">
    <value>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 3.</value>
  </data>
  <data name="ldarg.s" xml:space="preserve">
    <value>Loads the argument (referenced by a specified short form index) onto the evaluation stack.</value>
  </data>
  <data name="ldarga.s" xml:space="preserve">
    <value>Load an argument address, in short form, onto the evaluation stack.</value>
  </data>
  <data name="starg.s" xml:space="preserve">
    <value>Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.</value>
  </data>
  <data name="ldloc.s" xml:space="preserve">
    <value>Loads the local variable at a specific index onto the evaluation stack, short form.</value>
  </data>
  <data name="ldloca.s" xml:space="preserve">
    <value>Loads the address of the local variable at a specific index onto the evaluation stack, short form.</value>
  </data>
  <data name="stloc.s" xml:space="preserve">
    <value>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index (short form).</value>
  </data>
  <data name="ldnull" xml:space="preserve">
    <value>Pushes a null reference (type O) onto the evaluation stack.</value>
  </data>
  <data name="ldc.i4.m1" xml:space="preserve">
    <value>Pushes the integer value of -1 onto the evaluation stack as an int32.</value>
  </data>
  <data name="ldc.i4.0" xml:space="preserve">
    <value>Pushes the integer value of 0 onto the evaluation stack as an int32.</value>
  </data>
  <data name="ldc.i4.1" xml:space="preserve">
    <value>Pushes the integer value of 1 onto the evaluation stack as an int32.</value>
  </data>
  <data name="ldc.i4.2" xml:space="preserve">
    <value>Pushes the integer value of 2 onto the evaluation stack as an int32.</value>
  </data>
  <data name="ldc.i4.3" xml:space="preserve">
    <value>Pushes the integer value of 3 onto the evaluation stack as an int32.</value>
  </data>
  <data name="ldc.i4.4" xml:space="preserve">
    <value>Pushes the integer value of 4 onto the evaluation stack as an int32.</value>
  </data>
  <data name="ldc.i4.5" xml:space="preserve">
    <value>Pushes the integer value of 5 onto the evaluation stack as an int32.</value>
  </data>
  <data name="ldc.i4.6" xml:space="preserve">
    <value>Pushes the integer value of 6 onto the evaluation stack as an int32.</value>
  </data>
  <data name="ldc.i4.7" xml:space="preserve">
    <value>Pushes the integer value of 7 onto the evaluation stack as an int32.</value>
  </data>
  <data name="ldc.i4.8" xml:space="preserve">
    <value>Pushes the integer value of 8 onto the evaluation stack as an int32.</value>
  </data>
  <data name="ldc.i4.s" xml:space="preserve">
    <value>Pushes the supplied int8 value onto the evaluation stack as an int32, short form.</value>
  </data>
  <data name="ldc.i4" xml:space="preserve">
    <value>Pushes a supplied value of type int32 onto the evaluation stack as an int32.</value>
  </data>
  <data name="ldc.i8" xml:space="preserve">
    <value>Pushes a supplied value of type int64 onto the evaluation stack as an int64.</value>
  </data>
  <data name="ldc.r4" xml:space="preserve">
    <value>Pushes a supplied value of type float32 onto the evaluation stack as type F (float).</value>
  </data>
  <data name="ldc.r8" xml:space="preserve">
    <value>Pushes a supplied value of type float64 onto the evaluation stack as type F (float).</value>
  </data>
  <data name="dup" xml:space="preserve">
    <value>Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.</value>
  </data>
  <data name="pop" xml:space="preserve">
    <value>Removes the value currently on top of the evaluation stack.</value>
  </data>
  <data name="jmp" xml:space="preserve">
    <value>Exits current method and jumps to specified method.</value>
  </data>
  <data name="call" xml:space="preserve">
    <value>Calls the method indicated by the passed method descriptor.</value>
  </data>
  <data name="calli" xml:space="preserve">
    <value>Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.</value>
  </data>
  <data name="ret" xml:space="preserve">
    <value>Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.</value>
  </data>
  <data name="br.s" xml:space="preserve">
    <value>Unconditionally transfers control to a target instruction (short form).</value>
  </data>
  <data name="brfalse.s" xml:space="preserve">
    <value>Transfers control to a target instruction if value is false, a null reference, or zero.</value>
  </data>
  <data name="brtrue.s" xml:space="preserve">
    <value>Transfers control to a target instruction (short form) if value is true, not null, or non-zero.</value>
  </data>
  <data name="beq.s" xml:space="preserve">
    <value>Transfers control to a target instruction (short form) if two values are equal.</value>
  </data>
  <data name="bge.s" xml:space="preserve">
    <value>Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.</value>
  </data>
  <data name="bgt.s" xml:space="preserve">
    <value>Transfers control to a target instruction (short form) if the first value is greater than the second value.</value>
  </data>
  <data name="ble.s" xml:space="preserve">
    <value>Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.</value>
  </data>
  <data name="blt.s" xml:space="preserve">
    <value>Transfers control to a target instruction (short form) if the first value is less than the second value.</value>
  </data>
  <data name="bne.un.s" xml:space="preserve">
    <value>Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.</value>
  </data>
  <data name="bge.un.s" xml:space="preserve">
    <value>Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</value>
  </data>
  <data name="bgt.un.s" xml:space="preserve">
    <value>Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</value>
  </data>
  <data name="ble.un.s" xml:space="preserve">
    <value>Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</value>
  </data>
  <data name="blt.un.s" xml:space="preserve">
    <value>Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</value>
  </data>
  <data name="br" xml:space="preserve">
    <value>Unconditionally transfers control to a target instruction.</value>
  </data>
  <data name="brfalse" xml:space="preserve">
    <value>Transfers control to a target instruction if value is false, a null reference (Nothing in Visual Basic), or zero.</value>
  </data>
  <data name="brtrue" xml:space="preserve">
    <value>Transfers control to a target instruction if value is true, not null, or non-zero.</value>
  </data>
  <data name="beq" xml:space="preserve">
    <value>Transfers control to a target instruction if two values are equal.</value>
  </data>
  <data name="bge" xml:space="preserve">
    <value>Transfers control to a target instruction if the first value is greater than or equal to the second value.</value>
  </data>
  <data name="bgt" xml:space="preserve">
    <value>Transfers control to a target instruction if the first value is greater than the second value.</value>
  </data>
  <data name="ble" xml:space="preserve">
    <value>Transfers control to a target instruction if the first value is less than or equal to the second value.</value>
  </data>
  <data name="blt" xml:space="preserve">
    <value>Transfers control to a target instruction if the first value is less than the second value.</value>
  </data>
  <data name="bne.un" xml:space="preserve">
    <value>Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.</value>
  </data>
  <data name="bge.un" xml:space="preserve">
    <value>Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</value>
  </data>
  <data name="bgt.un" xml:space="preserve">
    <value>Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</value>
  </data>
  <data name="ble.un" xml:space="preserve">
    <value>Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</value>
  </data>
  <data name="blt.un" xml:space="preserve">
    <value>Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</value>
  </data>
  <data name="switch" xml:space="preserve">
    <value>Implements a jump table.</value>
  </data>
  <data name="ldind.i1" xml:space="preserve">
    <value>Loads a value of type int8 as an int32 onto the evaluation stack indirectly.</value>
  </data>
  <data name="ldind.u1" xml:space="preserve">
    <value>Loads a value of type unsigned int8 as an int32 onto the evaluation stack indirectly.</value>
  </data>
  <data name="ldind.i2" xml:space="preserve">
    <value>Loads a value of type int16 as an int32 onto the evaluation stack indirectly.</value>
  </data>
  <data name="ldind.u2" xml:space="preserve">
    <value>Loads a value of type unsigned int16 as an int32 onto the evaluation stack indirectly.</value>
  </data>
  <data name="ldind.i4" xml:space="preserve">
    <value>Loads a value of type int32 as an int32 onto the evaluation stack indirectly.</value>
  </data>
  <data name="ldind.u4" xml:space="preserve">
    <value>Loads a value of type unsigned int32 as an int32 onto the evaluation stack indirectly.</value>
  </data>
  <data name="ldind.i8" xml:space="preserve">
    <value>Loads a value of type int64 as an int64 onto the evaluation stack indirectly.</value>
  </data>
  <data name="ldind.i" xml:space="preserve">
    <value>Loads a value of type native int as a native int onto the evaluation stack indirectly.</value>
  </data>
  <data name="ldind.r4" xml:space="preserve">
    <value>Loads a value of type float32 as a type F (float) onto the evaluation stack indirectly.</value>
  </data>
  <data name="ldind.r8" xml:space="preserve">
    <value>Loads a value of type float64 as a type F (float) onto the evaluation stack indirectly.</value>
  </data>
  <data name="ldind.ref" xml:space="preserve">
    <value>Loads an object reference as a type O (object reference) onto the evaluation stack indirectly.</value>
  </data>
  <data name="stind.ref" xml:space="preserve">
    <value>Stores a object reference value at a supplied address.</value>
  </data>
  <data name="stind.i1" xml:space="preserve">
    <value>Stores a value of type int8 at a supplied address.</value>
  </data>
  <data name="stind.i2" xml:space="preserve">
    <value>Stores a value of type int16 at a supplied address.</value>
  </data>
  <data name="stind.i4" xml:space="preserve">
    <value>Stores a value of type int32 at a supplied address.</value>
  </data>
  <data name="stind.i8" xml:space="preserve">
    <value>Stores a value of type int64 at a supplied address.</value>
  </data>
  <data name="stind.r4" xml:space="preserve">
    <value>Stores a value of type float32 at a supplied address.</value>
  </data>
  <data name="stind.r8" xml:space="preserve">
    <value>Stores a value of type float64 at a supplied address.</value>
  </data>
  <data name="add" xml:space="preserve">
    <value>Adds two values and pushes the result onto the evaluation stack.</value>
  </data>
  <data name="sub" xml:space="preserve">
    <value>Subtracts one value from another and pushes the result onto the evaluation stack.</value>
  </data>
  <data name="mul" xml:space="preserve">
    <value>Multiplies two values and pushes the result on the evaluation stack.</value>
  </data>
  <data name="div" xml:space="preserve">
    <value>Divides two values and pushes the result as a floating-point (type F) or quotient (type int32) onto the evaluation stack.</value>
  </data>
  <data name="div.un" xml:space="preserve">
    <value>Divides two unsigned integer values and pushes the result (int32) onto the evaluation stack.</value>
  </data>
  <data name="rem" xml:space="preserve">
    <value>Divides two values and pushes the remainder onto the evaluation stack.</value>
  </data>
  <data name="rem.un" xml:space="preserve">
    <value>Divides two unsigned values and pushes the remainder onto the evaluation stack.</value>
  </data>
  <data name="and" xml:space="preserve">
    <value>Computes the bitwise AND of two values and pushes the result onto the evaluation stack.</value>
  </data>
  <data name="or" xml:space="preserve">
    <value>Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.</value>
  </data>
  <data name="xor" xml:space="preserve">
    <value>Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.</value>
  </data>
  <data name="shl" xml:space="preserve">
    <value>Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.</value>
  </data>
  <data name="shr" xml:space="preserve">
    <value>Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.</value>
  </data>
  <data name="shr.un" xml:space="preserve">
    <value>Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.</value>
  </data>
  <data name="neg" xml:space="preserve">
    <value>Negates a value and pushes the result onto the evaluation stack.</value>
  </data>
  <data name="not" xml:space="preserve">
    <value>Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.</value>
  </data>
  <data name="conv.i1" xml:space="preserve">
    <value>Converts the value on top of the evaluation stack to int8, then extends (pads) it to int32.</value>
  </data>
  <data name="conv.i2" xml:space="preserve">
    <value>Converts the value on top of the evaluation stack to int16, then extends (pads) it to int32.</value>
  </data>
  <data name="conv.i4" xml:space="preserve">
    <value>Converts the value on top of the evaluation stack to int32.</value>
  </data>
  <data name="conv.i8" xml:space="preserve">
    <value>Converts the value on top of the evaluation stack to int64.</value>
  </data>
  <data name="conv.r4" xml:space="preserve">
    <value>Converts the value on top of the evaluation stack to float32.</value>
  </data>
  <data name="conv.r8" xml:space="preserve">
    <value>Converts the value on top of the evaluation stack to float64.</value>
  </data>
  <data name="conv.u4" xml:space="preserve">
    <value>Converts the value on top of the evaluation stack to unsigned int32, and extends it to int32.</value>
  </data>
  <data name="conv.u8" xml:space="preserve">
    <value>Converts the value on top of the evaluation stack to unsigned int64, and extends it to int64.</value>
  </data>
  <data name="callvirt" xml:space="preserve">
    <value>Calls a late-bound method on an object, pushing the return value onto the evaluation stack.</value>
  </data>
  <data name="cpobj" xml:space="preserve">
    <value>Copies the value type located at the address of an object (type &amp;, * or native int) to the address of the destination object (type &amp;, * or native int).</value>
  </data>
  <data name="ldobj" xml:space="preserve">
    <value>Copies the value type object pointed to by an address to the top of the evaluation stack.</value>
  </data>
  <data name="ldstr" xml:space="preserve">
    <value>Pushes a new object reference to a string literal stored in the metadata.</value>
  </data>
  <data name="newobj" xml:space="preserve">
    <value>Creates a new object or a new instance of a value type, pushing an object reference (type O) onto the evaluation stack.</value>
  </data>
  <data name="castclass" xml:space="preserve">
    <value>Attempts to cast an object passed by reference to the specified class.</value>
  </data>
  <data name="isinst" xml:space="preserve">
    <value>Tests whether an object reference (type O) is an instance of a particular class.</value>
  </data>
  <data name="conv.r.un" xml:space="preserve">
    <value>Converts the unsigned integer value on top of the evaluation stack to float32.</value>
  </data>
  <data name="unbox" xml:space="preserve">
    <value>Converts the boxed representation of a value type to its unboxed form.</value>
  </data>
  <data name="throw" xml:space="preserve">
    <value>Throws the exception object currently on the evaluation stack.</value>
  </data>
  <data name="ldfld" xml:space="preserve">
    <value>Finds the value of a field in the object whose reference is currently on the evaluation stack.</value>
  </data>
  <data name="ldflda" xml:space="preserve">
    <value>Finds the address of a field in the object whose reference is currently on the evaluation stack.</value>
  </data>
  <data name="stfld" xml:space="preserve">
    <value>Replaces the value stored in the field of an object reference or pointer with a new value.</value>
  </data>
  <data name="ldsfld" xml:space="preserve">
    <value>Pushes the value of a static field onto the evaluation stack.</value>
  </data>
  <data name="ldsflda" xml:space="preserve">
    <value>Pushes the address of a static field onto the evaluation stack.</value>
  </data>
  <data name="stsfld" xml:space="preserve">
    <value>Replaces the value of a static field with a value from the evaluation stack.</value>
  </data>
  <data name="stobj" xml:space="preserve">
    <value>Copies a value of a specified type from the evaluation stack into a supplied memory address.</value>
  </data>
  <data name="conv.ovf.i1.un" xml:space="preserve">
    <value>Converts the unsigned value on top of the evaluation stack to signed int8 and extends it to int32, throwing OverflowException on overflow.</value>
  </data>
  <data name="conv.ovf.i2.un" xml:space="preserve">
    <value>Converts the unsigned value on top of the evaluation stack to signed int16 and extends it to int32, throwing OverflowException on overflow.</value>
  </data>
  <data name="conv.ovf.i4.un" xml:space="preserve">
    <value>Converts the unsigned value on top of the evaluation stack to signed int32, throwing OverflowException on overflow.</value>
  </data>
  <data name="conv.ovf.i8.un" xml:space="preserve">
    <value>Converts the unsigned value on top of the evaluation stack to signed int64, throwing OverflowException on overflow.</value>
  </data>
  <data name="conv.ovf.u1.un" xml:space="preserve">
    <value>Converts the unsigned value on top of the evaluation stack to unsigned int8 and extends it to int32, throwing OverflowException on overflow.</value>
  </data>
  <data name="conv.ovf.u2.un" xml:space="preserve">
    <value>Converts the unsigned value on top of the evaluation stack to unsigned int16 and extends it to int32, throwing OverflowException on overflow.</value>
  </data>
  <data name="conv.ovf.u4.un" xml:space="preserve">
    <value>Converts the unsigned value on top of the evaluation stack to unsigned int32, throwing OverflowException on overflow.</value>
  </data>
  <data name="conv.ovf.u8.un" xml:space="preserve">
    <value>Converts the unsigned value on top of the evaluation stack to unsigned int64, throwing OverflowException on overflow.</value>
  </data>
  <data name="conv.ovf.i.un" xml:space="preserve">
    <value>Converts the unsigned value on top of the evaluation stack to signed native int, throwing OverflowException on overflow.</value>
  </data>
  <data name="conv.ovf.u.un" xml:space="preserve">
    <value>Converts the unsigned value on top of the evaluation stack to unsigned native int, throwing OverflowException on overflow.</value>
  </data>
  <data name="box" xml:space="preserve">
    <value>Converts a value type to an object reference (type O).</value>
  </data>
  <data name="newarr" xml:space="preserve">
    <value>Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.</value>
  </data>
  <data name="ldlen" xml:space="preserve">
    <value>Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.</value>
  </data>
  <data name="ldelema" xml:space="preserve">
    <value>Loads the address of the array element at a specified array index onto the top of the evaluation stack as type &amp; (managed pointer).</value>
  </data>
  <data name="ldelem.i1" xml:space="preserve">
    <value>Loads the element with type int8 at a specified array index onto the top of the evaluation stack as an int32.</value>
  </data>
  <data name="ldelem.u1" xml:space="preserve">
    <value>Loads the element with type unsigned int8 at a specified array index onto the top of the evaluation stack as an int32.</value>
  </data>
  <data name="ldelem.i2" xml:space="preserve">
    <value>Loads the element with type int16 at a specified array index onto the top of the evaluation stack as an int32.</value>
  </data>
  <data name="ldelem.u2" xml:space="preserve">
    <value>Loads the element with type unsigned int16 at a specified array index onto the top of the evaluation stack as an int32.</value>
  </data>
  <data name="ldelem.i4" xml:space="preserve">
    <value>Loads the element with type int32 at a specified array index onto the top of the evaluation stack as an int32.</value>
  </data>
  <data name="ldelem.u4" xml:space="preserve">
    <value>Loads the element with type unsigned int32 at a specified array index onto the top of the evaluation stack as an int32.</value>
  </data>
  <data name="ldelem.i8" xml:space="preserve">
    <value>Loads the element with type int64 at a specified array index onto the top of the evaluation stack as an int64.</value>
  </data>
  <data name="ldelem.i" xml:space="preserve">
    <value>Loads the element with type native int at a specified array index onto the top of the evaluation stack as a native int.</value>
  </data>
  <data name="ldelem.r4" xml:space="preserve">
    <value>Loads the element with type float32 at a specified array index onto the top of the evaluation stack as type F (float).</value>
  </data>
  <data name="ldelem.r8" xml:space="preserve">
    <value>Loads the element with type float64 at a specified array index onto the top of the evaluation stack as type F (float).</value>
  </data>
  <data name="ldelem.ref" xml:space="preserve">
    <value>Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type O (object reference).</value>
  </data>
  <data name="stelem.i" xml:space="preserve">
    <value>Replaces the array element at a given index with the native int value on the evaluation stack.</value>
  </data>
  <data name="stelem.i1" xml:space="preserve">
    <value>Replaces the array element at a given index with the int8 value on the evaluation stack.</value>
  </data>
  <data name="stelem.i2" xml:space="preserve">
    <value>Replaces the array element at a given index with the int16 value on the evaluation stack.</value>
  </data>
  <data name="stelem.i4" xml:space="preserve">
    <value>Replaces the array element at a given index with the int32 value on the evaluation stack.</value>
  </data>
  <data name="stelem.i8" xml:space="preserve">
    <value>Replaces the array element at a given index with the int64 value on the evaluation stack.</value>
  </data>
  <data name="stelem.r4" xml:space="preserve">
    <value>Replaces the array element at a given index with the float32 value on the evaluation stack.</value>
  </data>
  <data name="stelem.r8" xml:space="preserve">
    <value>Replaces the array element at a given index with the float64 value on the evaluation stack.</value>
  </data>
  <data name="stelem.ref" xml:space="preserve">
    <value>Replaces the array element at a given index with the object ref value (type O) on the evaluation stack.</value>
  </data>
  <data name="ldelem" xml:space="preserve">
    <value>Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.</value>
  </data>
  <data name="stelem" xml:space="preserve">
    <value>Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.</value>
  </data>
  <data name="unbox.any" xml:space="preserve">
    <value>Converts the boxed representation of a type specified in the instruction to its unboxed form.</value>
  </data>
  <data name="conv.ovf.i1" xml:space="preserve">
    <value>Converts the signed value on top of the evaluation stack to signed int8 and extends it to int32, throwing OverflowException on overflow.</value>
  </data>
  <data name="conv.ovf.u1" xml:space="preserve">
    <value>Converts the signed value on top of the evaluation stack to unsigned int8 and extends it to int32, throwing OverflowException on overflow.</value>
  </data>
  <data name="conv.ovf.i2" xml:space="preserve">
    <value>Converts the signed value on top of the evaluation stack to signed int16 and extending it to int32, throwing OverflowException on overflow.</value>
  </data>
  <data name="conv.ovf.u2" xml:space="preserve">
    <value>Converts the signed value on top of the evaluation stack to unsigned int16 and extends it to int32, throwing OverflowException on overflow.</value>
  </data>
  <data name="conv.ovf.i4" xml:space="preserve">
    <value>Converts the signed value on top of the evaluation stack to signed int32, throwing OverflowException on overflow.</value>
  </data>
  <data name="conv.ovf.u4" xml:space="preserve">
    <value>Converts the signed value on top of the evaluation stack to unsigned int32, throwing OverflowException on overflow.</value>
  </data>
  <data name="conv.ovf.i8" xml:space="preserve">
    <value>Converts the signed value on top of the evaluation stack to signed int64, throwing OverflowException on overflow.</value>
  </data>
  <data name="conv.ovf.u8" xml:space="preserve">
    <value>Converts the signed value on top of the evaluation stack to unsigned int64, throwing OverflowException on overflow.</value>
  </data>
  <data name="refanyval" xml:space="preserve">
    <value>Retrieves the address (type &amp;) embedded in a typed reference.</value>
  </data>
  <data name="ckfinite" xml:space="preserve">
    <value>Throws ArithmeticException if value is not a finite number.</value>
  </data>
  <data name="mkrefany" xml:space="preserve">
    <value>Pushes a typed reference to an instance of a specific type onto the evaluation stack.</value>
  </data>
  <data name="ldtoken" xml:space="preserve">
    <value>Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.</value>
  </data>
  <data name="conv.u2" xml:space="preserve">
    <value>Converts the value on top of the evaluation stack to unsigned int16, and extends it to int32.</value>
  </data>
  <data name="conv.u1" xml:space="preserve">
    <value>Converts the value on top of the evaluation stack to unsigned int8, and extends it to int32.</value>
  </data>
  <data name="conv.i" xml:space="preserve">
    <value>Converts the value on top of the evaluation stack to native int.</value>
  </data>
  <data name="conv.ovf.i" xml:space="preserve">
    <value>Converts the signed value on top of the evaluation stack to signed native int, throwing OverflowException on overflow.</value>
  </data>
  <data name="conv.ovf.u" xml:space="preserve">
    <value>Converts the signed value on top of the evaluation stack to unsigned native int, throwing OverflowException on overflow.</value>
  </data>
  <data name="add.ovf" xml:space="preserve">
    <value>Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.</value>
  </data>
  <data name="add.ovf.un" xml:space="preserve">
    <value>Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</value>
  </data>
  <data name="mul.ovf" xml:space="preserve">
    <value>Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.</value>
  </data>
  <data name="mul.ovf.un" xml:space="preserve">
    <value>Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</value>
  </data>
  <data name="sub.ovf" xml:space="preserve">
    <value>Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</value>
  </data>
  <data name="sub.ovf.un" xml:space="preserve">
    <value>Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</value>
  </data>
  <data name="endfinally" xml:space="preserve">
    <value>Transfers control from the fault or finally clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.</value>
  </data>
  <data name="leave" xml:space="preserve">
    <value>Exits a protected region of code, unconditionally transferring control to a specific target instruction.</value>
  </data>
  <data name="leave.s" xml:space="preserve">
    <value>Exits a protected region of code, unconditionally transferring control to a target instruction (short form).</value>
  </data>
  <data name="stind.i" xml:space="preserve">
    <value>Stores a value of type native int at a supplied address.</value>
  </data>
  <data name="conv.u" xml:space="preserve">
    <value>Converts the value on top of the evaluation stack to unsigned native int, and extends it to native int.</value>
  </data>
  <data name="prefix7" xml:space="preserve">
    <value>This is a reserved instruction.</value>
  </data>
  <data name="prefix6" xml:space="preserve">
    <value>This is a reserved instruction.</value>
  </data>
  <data name="prefix5" xml:space="preserve">
    <value>This is a reserved instruction.</value>
  </data>
  <data name="prefix4" xml:space="preserve">
    <value>This is a reserved instruction.</value>
  </data>
  <data name="prefix3" xml:space="preserve">
    <value>This is a reserved instruction.</value>
  </data>
  <data name="prefix2" xml:space="preserve">
    <value>This is a reserved instruction.</value>
  </data>
  <data name="prefix1" xml:space="preserve">
    <value>This is a reserved instruction.</value>
  </data>
  <data name="prefixref" xml:space="preserve">
    <value>This is a reserved instruction.</value>
  </data>
  <data name="arglist" xml:space="preserve">
    <value>Returns an unmanaged pointer to the argument list of the current method.</value>
  </data>
  <data name="ceq" xml:space="preserve">
    <value>Compares two values. If they are equal, the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.</value>
  </data>
  <data name="cgt" xml:space="preserve">
    <value>Compares two values. If the first value is greater than the second, the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.</value>
  </data>
  <data name="cgt.un" xml:space="preserve">
    <value>Compares two unsigned or unordered values. If the first value is greater than the second, the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.</value>
  </data>
  <data name="clt" xml:space="preserve">
    <value>Compares two values. If the first value is less than the second, the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.</value>
  </data>
  <data name="clt.un" xml:space="preserve">
    <value>Compares the unsigned or unordered values value1 and value2. If value1 is less than value2, then the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.</value>
  </data>
  <data name="ldftn" xml:space="preserve">
    <value>Pushes an unmanaged pointer (type native int) to the native code implementing a specific method onto the evaluation stack.</value>
  </data>
  <data name="ldvirtftn" xml:space="preserve">
    <value>Pushes an unmanaged pointer (type native int) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.</value>
  </data>
  <data name="ldarg" xml:space="preserve">
    <value>Loads an argument (referenced by a specified index value) onto the stack.</value>
  </data>
  <data name="ldarga" xml:space="preserve">
    <value>Load an argument address onto the evaluation stack.</value>
  </data>
  <data name="starg" xml:space="preserve">
    <value>Stores the value on top of the evaluation stack in the argument slot at a specified index.</value>
  </data>
  <data name="ldloc" xml:space="preserve">
    <value>Loads the local variable at a specific index onto the evaluation stack.</value>
  </data>
  <data name="ldloca" xml:space="preserve">
    <value>Loads the address of the local variable at a specific index onto the evaluation stack.</value>
  </data>
  <data name="stloc" xml:space="preserve">
    <value>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.</value>
  </data>
  <data name="localloc" xml:space="preserve">
    <value>Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type *) of the first allocated byte onto the evaluation stack.</value>
  </data>
  <data name="endfilter" xml:space="preserve">
    <value>Transfers control from the filter clause of an exception back to the Common Language Infrastructure (CLI) exception handler.</value>
  </data>
  <data name="unaligned." xml:space="preserve">
    <value>Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following ldind, stind, ldfld, stfld, ldobj, stobj, initblk, or cpblk instruction.</value>
  </data>
  <data name="volatile." xml:space="preserve">
    <value>Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</value>
  </data>
  <data name="tail." xml:space="preserve">
    <value>Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.</value>
  </data>
  <data name="initobj" xml:space="preserve">
    <value>Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.</value>
  </data>
  <data name="constrained." xml:space="preserve">
    <value>Constrains the type on which a virtual method call is made.</value>
  </data>
  <data name="cpblk" xml:space="preserve">
    <value>Copies a specified number bytes from a source address to a destination address.</value>
  </data>
  <data name="initblk" xml:space="preserve">
    <value>Initializes a specified block of memory at a specific address to a given size and initial value.</value>
  </data>
  <data name="rethrow" xml:space="preserve">
    <value>Rethrows the current exception.</value>
  </data>
  <data name="sizeof" xml:space="preserve">
    <value>Pushes the size, in bytes, of a supplied value type onto the evaluation stack.</value>
  </data>
  <data name="refanytype" xml:space="preserve">
    <value>Retrieves the type token embedded in a typed reference.</value>
  </data>
  <data name="readonly." xml:space="preserve">
    <value>Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.</value>
  </data>
  <data name="brinst" xml:space="preserve">
    <value>Transfers control to a target instruction if value is true, not null, or non-zero.</value>
  </data>
  <data name="brinst.s" xml:space="preserve">
    <value>Transfers control to a target instruction (short form) if value is true, not null, or non-zero.</value>
  </data>
  <data name="brnull" xml:space="preserve">
    <value>Transfers control to a target instruction if value is false, a null reference (Nothing in Visual Basic), or zero.</value>
  </data>
  <data name="brnull.s" xml:space="preserve">
    <value>Transfers control to a target instruction if value is false, a null reference, or zero.</value>
  </data>
  <data name="brzero" xml:space="preserve">
    <value>Transfers control to a target instruction if value is false, a null reference (Nothing in Visual Basic), or zero.</value>
  </data>
  <data name="brzero.s" xml:space="preserve">
    <value>Transfers control to a target instruction if value is false, a null reference, or zero.</value>
  </data>
  <data name="endfault" xml:space="preserve">
    <value>Transfers control from the fault or finally clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.</value>
  </data>
  <data name="endmac" xml:space="preserve">
    <value>This is an internal instruction indicating the end of a macro.</value>
  </data>
  <data name="illegal" xml:space="preserve">
    <value>This is an internal instruction representing an illegal instruction.</value>
  </data>
  <data name="ldelem.u8" xml:space="preserve">
    <value>Loads the element with type unsigned int64 at a specified array index onto the top of the evaluation stack as an int64.</value>
  </data>
  <data name="ldind.u8" xml:space="preserve">
    <value>Loads a value of type unsigned int64 as an int64 onto the evaluation stack indirectly.</value>
  </data>
</root>